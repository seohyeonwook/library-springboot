package com.study.library.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebMvcConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) { // 크로스 오리진 허용 3000 / 8080
                                                         // CORS(Cross-Origin Resource Sharing) 구성 메서드
        registry.addMapping("/**")    // 모든 요청 주소
                .allowedMethods("*")  // 모든메서드
                .allowedOrigins("*"); // 어디에서 들어오든  다받아준다
    }
}
// 크로스 오리진(Cross-Origin)은 보안 상의 이유로 인해 브라우저에서 다른 출처(origin)로부터
// 리소스에 접근하는 것을 제한하는 정책을 의미합니다.
// 출처(origin)란 프로토콜(예: http, https), 호스트(도메인), 포트 번호의 조합을 말합니다.


// 시큐리티 흐름 - 인증을 하기위해서 => 하는 이유 서버가 데이터를 가지고있는데 이데이터 crud할수있게 할거냐 이것을 인증을했냐안했냐 기준으로 - 데이터 보호
// 이것을 중간에서 인증을 거쳐서
// 클라이언트에서는 회원가입이 있는데 일반회원가입이있고 oauth2회원가입 두가지로 나뉜다 로그인도 두가지로 나뉜다
/**
 * 데이터 베이스에 유저라는 정보가있다 (정보를 담을수있는 테이블이 있다) 회원가입은 데이터베이스에 추가 하는작업
 * 컨피그 파일에 최초 회원가입할때 통과 시켜주자 처음부터 인증을 받지 않는다 일반 회원가입이나 로그인은 인증 거치지 말아
 * 필터를 경비라고 생각하자 컨피그가 필터 덩어리다  근데 추가나 삭제같은 작업은 필터를 거치겠다
 * 요청들어오면 제이슨 으로 받아서 디티오객체로 변환시킨다 받고나서 정보를 서비스로 넘겨서 디티오를 엔티티로 변환해서 레파지토리로넘기는데
 * 레파지토리가 결국 .xml(마이바티스) 여기서 쿼리문 작성 여기서 응답으로 리턴 왔던길로 다시돌아가는데 굳이 응답안해줘도 된다 선택임
 * 유효성 검사 하는일- 중복이있는지 없는지 문제가 있는지 여기서 걸리면 컨트롤러까지못가고 바로 응답으로 클라이언트로 다시보낸다
 *
 * oauth2 는 일단 회원가입과 로그인이 연결된다 이미 회원가입되어있으니까 로그인 요청을 서버에 한다 /oauth2/atsdjflsdf/code/google 뭐이렇게 요청하는데 우리는
 * 이런 컨트롤러가없다 왜냐하면 크롬 라이브러리에서 있다 구글로 예를들면 저렇게 요청하면 구글로 페이지를 자동적으로 보낸다 구글페이지에서 로그인성공하면
 * 로그인성공함과 동시에 인가 코드를 발급해준다 이 코드로 토큰요청을한다 =내가 코드번호 가지고있으니까 이코드번호에 맞는 권한을줘 총 2번 요청함 1.로그인 2.토큰요청
 * 토큰이있으면 구글에다가 정보(동의화면에서 승인한정보 = 사용자 정보 )를 달라고할수있는 권한이 생긴다 이걸 야물파일에서 셋팅한다 scope세팅 엑시오스세팅에 토큰 넣어둠
 * 정보를 받아와서 아이디값을 받아온다 그정보로 사용자 판별이 가능해진다 그리고 이아이디 가지고 oauth2테이블에서 있는지 없는지 확인한다 있으면 기존에 회원 없으면 처음 로그인
 * 아이디가 있다 없다를 응답으로 받아온다  그리고 아이디가 있으면 아이디를 가지고 오어스 서비스에서 리턴트로 디폴트 오어스2 유저가 만들어지면 석세스 핸들러라는곳으로 보낸다 정상적이지 않은아이디(로그인실패)
 * 핸들러에서 어서티캐이션 객체를 만들어준다  이걸로 일반(프린시펄유저)로그인 오어스2(디폴트오어스2유저)로그인 두개의 객체를 만들어준다 근데 어선티캐이션 안에는 프린시펄이 들어있다 사실상
 * 프린시펄에서 두개의 로그인이 만들어지는것 그래서 호출할때 어선티케이션.프린시펄.프린시펄 유저 이렇게 한다 프린시펄안에 유저 정보들이 들어있다
 * 어선티케이션은 시큐리티컨텍스홀더로 들어간다
 *
 * */
